// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rotr.proto

#include "rotr.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_rotr_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_rotr_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_AppendEntriesRequest_EntriesEntry_DoNotUse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_rotr_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_NodeInfo;
}  // namespace protobuf_rotr_2eproto
namespace rotr {
class StatusDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Status>
      _instance;
} _Status_default_instance_;
class NodeInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NodeInfo>
      _instance;
} _NodeInfo_default_instance_;
class ClusterInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ClusterInfo>
      _instance;
} _ClusterInfo_default_instance_;
class NodeInfoListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NodeInfoList>
      _instance;
} _NodeInfoList_default_instance_;
class AppendEntriesRequest_EntriesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AppendEntriesRequest_EntriesEntry_DoNotUse>
      _instance;
} _AppendEntriesRequest_EntriesEntry_DoNotUse_default_instance_;
class AppendEntriesRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AppendEntriesRequest>
      _instance;
} _AppendEntriesRequest_default_instance_;
class RequestVoteRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RequestVoteRequest>
      _instance;
} _RequestVoteRequest_default_instance_;
class AppendEntriesResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AppendEntriesResponse>
      _instance;
} _AppendEntriesResponse_default_instance_;
class RequestVoteResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RequestVoteResponse>
      _instance;
} _RequestVoteResponse_default_instance_;
}  // namespace rotr
namespace protobuf_rotr_2eproto {
static void InitDefaultsStatus() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rotr::_Status_default_instance_;
    new (ptr) ::rotr::Status();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rotr::Status::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Status =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsStatus}, {}};

static void InitDefaultsNodeInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rotr::_NodeInfo_default_instance_;
    new (ptr) ::rotr::NodeInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rotr::NodeInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_NodeInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsNodeInfo}, {}};

static void InitDefaultsClusterInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rotr::_ClusterInfo_default_instance_;
    new (ptr) ::rotr::ClusterInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rotr::ClusterInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ClusterInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsClusterInfo}, {
      &protobuf_rotr_2eproto::scc_info_NodeInfo.base,}};

static void InitDefaultsNodeInfoList() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rotr::_NodeInfoList_default_instance_;
    new (ptr) ::rotr::NodeInfoList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rotr::NodeInfoList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_NodeInfoList =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsNodeInfoList}, {
      &protobuf_rotr_2eproto::scc_info_NodeInfo.base,}};

static void InitDefaultsAppendEntriesRequest_EntriesEntry_DoNotUse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rotr::_AppendEntriesRequest_EntriesEntry_DoNotUse_default_instance_;
    new (ptr) ::rotr::AppendEntriesRequest_EntriesEntry_DoNotUse();
  }
  ::rotr::AppendEntriesRequest_EntriesEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_AppendEntriesRequest_EntriesEntry_DoNotUse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAppendEntriesRequest_EntriesEntry_DoNotUse}, {}};

static void InitDefaultsAppendEntriesRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rotr::_AppendEntriesRequest_default_instance_;
    new (ptr) ::rotr::AppendEntriesRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rotr::AppendEntriesRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_AppendEntriesRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsAppendEntriesRequest}, {
      &protobuf_rotr_2eproto::scc_info_NodeInfo.base,
      &protobuf_rotr_2eproto::scc_info_AppendEntriesRequest_EntriesEntry_DoNotUse.base,}};

static void InitDefaultsRequestVoteRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rotr::_RequestVoteRequest_default_instance_;
    new (ptr) ::rotr::RequestVoteRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rotr::RequestVoteRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_RequestVoteRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRequestVoteRequest}, {
      &protobuf_rotr_2eproto::scc_info_NodeInfo.base,}};

static void InitDefaultsAppendEntriesResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rotr::_AppendEntriesResponse_default_instance_;
    new (ptr) ::rotr::AppendEntriesResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rotr::AppendEntriesResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_AppendEntriesResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAppendEntriesResponse}, {}};

static void InitDefaultsRequestVoteResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rotr::_RequestVoteResponse_default_instance_;
    new (ptr) ::rotr::RequestVoteResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rotr::RequestVoteResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RequestVoteResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRequestVoteResponse}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Status.base);
  ::google::protobuf::internal::InitSCC(&scc_info_NodeInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ClusterInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_NodeInfoList.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AppendEntriesRequest_EntriesEntry_DoNotUse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AppendEntriesRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RequestVoteRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AppendEntriesResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RequestVoteResponse.base);
}

::google::protobuf::Metadata file_level_metadata[9];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::rotr::Status, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::rotr::Status, statuscode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::rotr::Status, message_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::rotr::NodeInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::rotr::NodeInfo, ipv4address_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::rotr::NodeInfo, hostname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::rotr::NodeInfo, isleader_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::rotr::NodeInfo, clusterid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::rotr::NodeInfo, clustername_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::rotr::ClusterInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::rotr::ClusterInfo, clustername_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::rotr::ClusterInfo, clusterid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::rotr::ClusterInfo, nodes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::rotr::ClusterInfo, leader_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::rotr::NodeInfoList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::rotr::NodeInfoList, nodes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::rotr::AppendEntriesRequest_EntriesEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::rotr::AppendEntriesRequest_EntriesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::rotr::AppendEntriesRequest_EntriesEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::rotr::AppendEntriesRequest_EntriesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::rotr::AppendEntriesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::rotr::AppendEntriesRequest, term_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::rotr::AppendEntriesRequest, leadernode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::rotr::AppendEntriesRequest, prevlogindex_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::rotr::AppendEntriesRequest, prevlogterm_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::rotr::AppendEntriesRequest, leadercommitindex_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::rotr::AppendEntriesRequest, entries_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::rotr::RequestVoteRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::rotr::RequestVoteRequest, term_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::rotr::RequestVoteRequest, candidatenode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::rotr::RequestVoteRequest, lastlogindex_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::rotr::RequestVoteRequest, lastlogterm_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::rotr::AppendEntriesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::rotr::AppendEntriesResponse, currentterm_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::rotr::AppendEntriesResponse, success_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::rotr::RequestVoteResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::rotr::RequestVoteResponse, term_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::rotr::RequestVoteResponse, votegranted_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::rotr::Status)},
  { 7, -1, sizeof(::rotr::NodeInfo)},
  { 17, -1, sizeof(::rotr::ClusterInfo)},
  { 26, -1, sizeof(::rotr::NodeInfoList)},
  { 32, 39, sizeof(::rotr::AppendEntriesRequest_EntriesEntry_DoNotUse)},
  { 41, -1, sizeof(::rotr::AppendEntriesRequest)},
  { 52, -1, sizeof(::rotr::RequestVoteRequest)},
  { 61, -1, sizeof(::rotr::AppendEntriesResponse)},
  { 68, -1, sizeof(::rotr::RequestVoteResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::rotr::_Status_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::rotr::_NodeInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::rotr::_ClusterInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::rotr::_NodeInfoList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::rotr::_AppendEntriesRequest_EntriesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::rotr::_AppendEntriesRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::rotr::_RequestVoteRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::rotr::_AppendEntriesResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::rotr::_RequestVoteResponse_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "rotr.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 9);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\nrotr.proto\022\004rotr\"\?\n\006Status\022$\n\nstatusCo"
      "de\030\001 \001(\0162\020.rotr.StatusCode\022\017\n\007message\030\002 "
      "\001(\t\"k\n\010NodeInfo\022\023\n\013ipV4Address\030\001 \001(\t\022\020\n\010"
      "hostName\030\002 \001(\t\022\020\n\010isLeader\030\003 \001(\010\022\021\n\tclus"
      "terId\030\004 \001(\t\022\023\n\013clusterName\030\005 \001(\t\"t\n\013Clus"
      "terInfo\022\023\n\013clusterName\030\001 \001(\t\022\021\n\tclusterI"
      "d\030\002 \001(\t\022\035\n\005nodes\030\003 \003(\0132\016.rotr.NodeInfo\022\036"
      "\n\006leader\030\005 \001(\0132\016.rotr.NodeInfo\"-\n\014NodeIn"
      "foList\022\035\n\005nodes\030\001 \003(\0132\016.rotr.NodeInfo\"\370\001"
      "\n\024AppendEntriesRequest\022\014\n\004term\030\001 \001(\r\022\"\n\n"
      "leaderNode\030\002 \001(\0132\016.rotr.NodeInfo\022\024\n\014prev"
      "LogIndex\030\003 \001(\r\022\023\n\013prevLogTerm\030\004 \001(\r\022\031\n\021l"
      "eaderCommitIndex\030\005 \001(\r\0228\n\007entries\030\006 \003(\0132"
      "\'.rotr.AppendEntriesRequest.EntriesEntry"
      "\032.\n\014EntriesEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002"
      " \001(\t:\0028\001\"t\n\022RequestVoteRequest\022\014\n\004term\030\001"
      " \001(\r\022%\n\rcandidateNode\030\002 \001(\0132\016.rotr.NodeI"
      "nfo\022\024\n\014lastLogIndex\030\003 \001(\r\022\023\n\013lastLogTerm"
      "\030\004 \001(\r\"=\n\025AppendEntriesResponse\022\023\n\013curre"
      "ntTerm\030\001 \001(\r\022\017\n\007success\030\002 \001(\010\"8\n\023Request"
      "VoteResponse\022\014\n\004term\030\001 \001(\r\022\023\n\013voteGrante"
      "d\030\002 \001(\010*0\n\nStatusCode\022\010\n\004None\020\000\022\013\n\007Failu"
      "re\020\001\022\013\n\007Success\020\0022\243\001\n\017RaftInternalRPC\022J\n"
      "\rAppendEntries\022\032.rotr.AppendEntriesReque"
      "st\032\033.rotr.AppendEntriesResponse\"\000\022D\n\013Req"
      "uestVote\022\030.rotr.RequestVoteRequest\032\031.rot"
      "r.RequestVoteResponse\"\000B\006\n\004rotrb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1079);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "rotr.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_rotr_2eproto
namespace rotr {
const ::google::protobuf::EnumDescriptor* StatusCode_descriptor() {
  protobuf_rotr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rotr_2eproto::file_level_enum_descriptors[0];
}
bool StatusCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void Status::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Status::kStatusCodeFieldNumber;
const int Status::kMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Status::Status()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_rotr_2eproto::scc_info_Status.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:rotr.Status)
}
Status::Status(const Status& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.message().size() > 0) {
    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  statuscode_ = from.statuscode_;
  // @@protoc_insertion_point(copy_constructor:rotr.Status)
}

void Status::SharedCtor() {
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  statuscode_ = 0;
}

Status::~Status() {
  // @@protoc_insertion_point(destructor:rotr.Status)
  SharedDtor();
}

void Status::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Status::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Status::descriptor() {
  ::protobuf_rotr_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_rotr_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Status& Status::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_rotr_2eproto::scc_info_Status.base);
  return *internal_default_instance();
}


void Status::Clear() {
// @@protoc_insertion_point(message_clear_start:rotr.Status)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  statuscode_ = 0;
  _internal_metadata_.Clear();
}

bool Status::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rotr.Status)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .rotr.StatusCode statusCode = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_statuscode(static_cast< ::rotr::StatusCode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string message = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->message().data(), static_cast<int>(this->message().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "rotr.Status.message"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rotr.Status)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rotr.Status)
  return false;
#undef DO_
}

void Status::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rotr.Status)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .rotr.StatusCode statusCode = 1;
  if (this->statuscode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->statuscode(), output);
  }

  // string message = 2;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "rotr.Status.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->message(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:rotr.Status)
}

::google::protobuf::uint8* Status::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:rotr.Status)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .rotr.StatusCode statusCode = 1;
  if (this->statuscode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->statuscode(), target);
  }

  // string message = 2;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "rotr.Status.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->message(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rotr.Status)
  return target;
}

size_t Status::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rotr.Status)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string message = 2;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message());
  }

  // .rotr.StatusCode statusCode = 1;
  if (this->statuscode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->statuscode());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Status::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rotr.Status)
  GOOGLE_DCHECK_NE(&from, this);
  const Status* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Status>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rotr.Status)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rotr.Status)
    MergeFrom(*source);
  }
}

void Status::MergeFrom(const Status& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rotr.Status)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message().size() > 0) {

    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  if (from.statuscode() != 0) {
    set_statuscode(from.statuscode());
  }
}

void Status::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rotr.Status)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Status::CopyFrom(const Status& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rotr.Status)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Status::IsInitialized() const {
  return true;
}

void Status::Swap(Status* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Status::InternalSwap(Status* other) {
  using std::swap;
  message_.Swap(&other->message_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(statuscode_, other->statuscode_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Status::GetMetadata() const {
  protobuf_rotr_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_rotr_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void NodeInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NodeInfo::kIpV4AddressFieldNumber;
const int NodeInfo::kHostNameFieldNumber;
const int NodeInfo::kIsLeaderFieldNumber;
const int NodeInfo::kClusterIdFieldNumber;
const int NodeInfo::kClusterNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NodeInfo::NodeInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_rotr_2eproto::scc_info_NodeInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:rotr.NodeInfo)
}
NodeInfo::NodeInfo(const NodeInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ipv4address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ipv4address().size() > 0) {
    ipv4address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ipv4address_);
  }
  hostname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.hostname().size() > 0) {
    hostname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hostname_);
  }
  clusterid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.clusterid().size() > 0) {
    clusterid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clusterid_);
  }
  clustername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.clustername().size() > 0) {
    clustername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clustername_);
  }
  isleader_ = from.isleader_;
  // @@protoc_insertion_point(copy_constructor:rotr.NodeInfo)
}

void NodeInfo::SharedCtor() {
  ipv4address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hostname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clusterid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clustername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  isleader_ = false;
}

NodeInfo::~NodeInfo() {
  // @@protoc_insertion_point(destructor:rotr.NodeInfo)
  SharedDtor();
}

void NodeInfo::SharedDtor() {
  ipv4address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hostname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clusterid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clustername_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void NodeInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* NodeInfo::descriptor() {
  ::protobuf_rotr_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_rotr_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NodeInfo& NodeInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_rotr_2eproto::scc_info_NodeInfo.base);
  return *internal_default_instance();
}


void NodeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:rotr.NodeInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ipv4address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hostname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clusterid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clustername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  isleader_ = false;
  _internal_metadata_.Clear();
}

bool NodeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rotr.NodeInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string ipV4Address = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ipv4address()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ipv4address().data(), static_cast<int>(this->ipv4address().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "rotr.NodeInfo.ipV4Address"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string hostName = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hostname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->hostname().data(), static_cast<int>(this->hostname().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "rotr.NodeInfo.hostName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool isLeader = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isleader_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string clusterId = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clusterid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->clusterid().data(), static_cast<int>(this->clusterid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "rotr.NodeInfo.clusterId"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string clusterName = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clustername()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->clustername().data(), static_cast<int>(this->clustername().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "rotr.NodeInfo.clusterName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rotr.NodeInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rotr.NodeInfo)
  return false;
#undef DO_
}

void NodeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rotr.NodeInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ipV4Address = 1;
  if (this->ipv4address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ipv4address().data(), static_cast<int>(this->ipv4address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "rotr.NodeInfo.ipV4Address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ipv4address(), output);
  }

  // string hostName = 2;
  if (this->hostname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hostname().data(), static_cast<int>(this->hostname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "rotr.NodeInfo.hostName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->hostname(), output);
  }

  // bool isLeader = 3;
  if (this->isleader() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->isleader(), output);
  }

  // string clusterId = 4;
  if (this->clusterid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->clusterid().data(), static_cast<int>(this->clusterid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "rotr.NodeInfo.clusterId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->clusterid(), output);
  }

  // string clusterName = 5;
  if (this->clustername().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->clustername().data(), static_cast<int>(this->clustername().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "rotr.NodeInfo.clusterName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->clustername(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:rotr.NodeInfo)
}

::google::protobuf::uint8* NodeInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:rotr.NodeInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ipV4Address = 1;
  if (this->ipv4address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ipv4address().data(), static_cast<int>(this->ipv4address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "rotr.NodeInfo.ipV4Address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ipv4address(), target);
  }

  // string hostName = 2;
  if (this->hostname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hostname().data(), static_cast<int>(this->hostname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "rotr.NodeInfo.hostName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->hostname(), target);
  }

  // bool isLeader = 3;
  if (this->isleader() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->isleader(), target);
  }

  // string clusterId = 4;
  if (this->clusterid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->clusterid().data(), static_cast<int>(this->clusterid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "rotr.NodeInfo.clusterId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->clusterid(), target);
  }

  // string clusterName = 5;
  if (this->clustername().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->clustername().data(), static_cast<int>(this->clustername().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "rotr.NodeInfo.clusterName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->clustername(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rotr.NodeInfo)
  return target;
}

size_t NodeInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rotr.NodeInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string ipV4Address = 1;
  if (this->ipv4address().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ipv4address());
  }

  // string hostName = 2;
  if (this->hostname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->hostname());
  }

  // string clusterId = 4;
  if (this->clusterid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->clusterid());
  }

  // string clusterName = 5;
  if (this->clustername().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->clustername());
  }

  // bool isLeader = 3;
  if (this->isleader() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NodeInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rotr.NodeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const NodeInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NodeInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rotr.NodeInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rotr.NodeInfo)
    MergeFrom(*source);
  }
}

void NodeInfo::MergeFrom(const NodeInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rotr.NodeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ipv4address().size() > 0) {

    ipv4address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ipv4address_);
  }
  if (from.hostname().size() > 0) {

    hostname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hostname_);
  }
  if (from.clusterid().size() > 0) {

    clusterid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clusterid_);
  }
  if (from.clustername().size() > 0) {

    clustername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clustername_);
  }
  if (from.isleader() != 0) {
    set_isleader(from.isleader());
  }
}

void NodeInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rotr.NodeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeInfo::CopyFrom(const NodeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rotr.NodeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeInfo::IsInitialized() const {
  return true;
}

void NodeInfo::Swap(NodeInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NodeInfo::InternalSwap(NodeInfo* other) {
  using std::swap;
  ipv4address_.Swap(&other->ipv4address_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  hostname_.Swap(&other->hostname_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  clusterid_.Swap(&other->clusterid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  clustername_.Swap(&other->clustername_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(isleader_, other->isleader_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata NodeInfo::GetMetadata() const {
  protobuf_rotr_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_rotr_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ClusterInfo::InitAsDefaultInstance() {
  ::rotr::_ClusterInfo_default_instance_._instance.get_mutable()->leader_ = const_cast< ::rotr::NodeInfo*>(
      ::rotr::NodeInfo::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClusterInfo::kClusterNameFieldNumber;
const int ClusterInfo::kClusterIdFieldNumber;
const int ClusterInfo::kNodesFieldNumber;
const int ClusterInfo::kLeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClusterInfo::ClusterInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_rotr_2eproto::scc_info_ClusterInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:rotr.ClusterInfo)
}
ClusterInfo::ClusterInfo(const ClusterInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      nodes_(from.nodes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clustername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.clustername().size() > 0) {
    clustername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clustername_);
  }
  clusterid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.clusterid().size() > 0) {
    clusterid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clusterid_);
  }
  if (from.has_leader()) {
    leader_ = new ::rotr::NodeInfo(*from.leader_);
  } else {
    leader_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:rotr.ClusterInfo)
}

void ClusterInfo::SharedCtor() {
  clustername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clusterid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  leader_ = NULL;
}

ClusterInfo::~ClusterInfo() {
  // @@protoc_insertion_point(destructor:rotr.ClusterInfo)
  SharedDtor();
}

void ClusterInfo::SharedDtor() {
  clustername_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clusterid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete leader_;
}

void ClusterInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ClusterInfo::descriptor() {
  ::protobuf_rotr_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_rotr_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ClusterInfo& ClusterInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_rotr_2eproto::scc_info_ClusterInfo.base);
  return *internal_default_instance();
}


void ClusterInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:rotr.ClusterInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nodes_.Clear();
  clustername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clusterid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && leader_ != NULL) {
    delete leader_;
  }
  leader_ = NULL;
  _internal_metadata_.Clear();
}

bool ClusterInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rotr.ClusterInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string clusterName = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clustername()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->clustername().data(), static_cast<int>(this->clustername().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "rotr.ClusterInfo.clusterName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string clusterId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clusterid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->clusterid().data(), static_cast<int>(this->clusterid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "rotr.ClusterInfo.clusterId"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .rotr.NodeInfo nodes = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_nodes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .rotr.NodeInfo leader = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_leader()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rotr.ClusterInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rotr.ClusterInfo)
  return false;
#undef DO_
}

void ClusterInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rotr.ClusterInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string clusterName = 1;
  if (this->clustername().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->clustername().data(), static_cast<int>(this->clustername().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "rotr.ClusterInfo.clusterName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->clustername(), output);
  }

  // string clusterId = 2;
  if (this->clusterid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->clusterid().data(), static_cast<int>(this->clusterid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "rotr.ClusterInfo.clusterId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->clusterid(), output);
  }

  // repeated .rotr.NodeInfo nodes = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->nodes_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->nodes(static_cast<int>(i)),
      output);
  }

  // .rotr.NodeInfo leader = 5;
  if (this->has_leader()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_leader(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:rotr.ClusterInfo)
}

::google::protobuf::uint8* ClusterInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:rotr.ClusterInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string clusterName = 1;
  if (this->clustername().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->clustername().data(), static_cast<int>(this->clustername().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "rotr.ClusterInfo.clusterName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->clustername(), target);
  }

  // string clusterId = 2;
  if (this->clusterid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->clusterid().data(), static_cast<int>(this->clusterid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "rotr.ClusterInfo.clusterId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->clusterid(), target);
  }

  // repeated .rotr.NodeInfo nodes = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->nodes_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->nodes(static_cast<int>(i)), deterministic, target);
  }

  // .rotr.NodeInfo leader = 5;
  if (this->has_leader()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_leader(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rotr.ClusterInfo)
  return target;
}

size_t ClusterInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rotr.ClusterInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .rotr.NodeInfo nodes = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->nodes_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->nodes(static_cast<int>(i)));
    }
  }

  // string clusterName = 1;
  if (this->clustername().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->clustername());
  }

  // string clusterId = 2;
  if (this->clusterid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->clusterid());
  }

  // .rotr.NodeInfo leader = 5;
  if (this->has_leader()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *leader_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClusterInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rotr.ClusterInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ClusterInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ClusterInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rotr.ClusterInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rotr.ClusterInfo)
    MergeFrom(*source);
  }
}

void ClusterInfo::MergeFrom(const ClusterInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rotr.ClusterInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  nodes_.MergeFrom(from.nodes_);
  if (from.clustername().size() > 0) {

    clustername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clustername_);
  }
  if (from.clusterid().size() > 0) {

    clusterid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clusterid_);
  }
  if (from.has_leader()) {
    mutable_leader()->::rotr::NodeInfo::MergeFrom(from.leader());
  }
}

void ClusterInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rotr.ClusterInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClusterInfo::CopyFrom(const ClusterInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rotr.ClusterInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClusterInfo::IsInitialized() const {
  return true;
}

void ClusterInfo::Swap(ClusterInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClusterInfo::InternalSwap(ClusterInfo* other) {
  using std::swap;
  CastToBase(&nodes_)->InternalSwap(CastToBase(&other->nodes_));
  clustername_.Swap(&other->clustername_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  clusterid_.Swap(&other->clusterid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(leader_, other->leader_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ClusterInfo::GetMetadata() const {
  protobuf_rotr_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_rotr_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void NodeInfoList::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NodeInfoList::kNodesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NodeInfoList::NodeInfoList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_rotr_2eproto::scc_info_NodeInfoList.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:rotr.NodeInfoList)
}
NodeInfoList::NodeInfoList(const NodeInfoList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      nodes_(from.nodes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:rotr.NodeInfoList)
}

void NodeInfoList::SharedCtor() {
}

NodeInfoList::~NodeInfoList() {
  // @@protoc_insertion_point(destructor:rotr.NodeInfoList)
  SharedDtor();
}

void NodeInfoList::SharedDtor() {
}

void NodeInfoList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* NodeInfoList::descriptor() {
  ::protobuf_rotr_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_rotr_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NodeInfoList& NodeInfoList::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_rotr_2eproto::scc_info_NodeInfoList.base);
  return *internal_default_instance();
}


void NodeInfoList::Clear() {
// @@protoc_insertion_point(message_clear_start:rotr.NodeInfoList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nodes_.Clear();
  _internal_metadata_.Clear();
}

bool NodeInfoList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rotr.NodeInfoList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .rotr.NodeInfo nodes = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_nodes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rotr.NodeInfoList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rotr.NodeInfoList)
  return false;
#undef DO_
}

void NodeInfoList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rotr.NodeInfoList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .rotr.NodeInfo nodes = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->nodes_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->nodes(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:rotr.NodeInfoList)
}

::google::protobuf::uint8* NodeInfoList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:rotr.NodeInfoList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .rotr.NodeInfo nodes = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->nodes_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->nodes(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rotr.NodeInfoList)
  return target;
}

size_t NodeInfoList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rotr.NodeInfoList)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .rotr.NodeInfo nodes = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->nodes_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->nodes(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NodeInfoList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rotr.NodeInfoList)
  GOOGLE_DCHECK_NE(&from, this);
  const NodeInfoList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NodeInfoList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rotr.NodeInfoList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rotr.NodeInfoList)
    MergeFrom(*source);
  }
}

void NodeInfoList::MergeFrom(const NodeInfoList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rotr.NodeInfoList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  nodes_.MergeFrom(from.nodes_);
}

void NodeInfoList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rotr.NodeInfoList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeInfoList::CopyFrom(const NodeInfoList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rotr.NodeInfoList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeInfoList::IsInitialized() const {
  return true;
}

void NodeInfoList::Swap(NodeInfoList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NodeInfoList::InternalSwap(NodeInfoList* other) {
  using std::swap;
  CastToBase(&nodes_)->InternalSwap(CastToBase(&other->nodes_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata NodeInfoList::GetMetadata() const {
  protobuf_rotr_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_rotr_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

AppendEntriesRequest_EntriesEntry_DoNotUse::AppendEntriesRequest_EntriesEntry_DoNotUse() {}
AppendEntriesRequest_EntriesEntry_DoNotUse::AppendEntriesRequest_EntriesEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void AppendEntriesRequest_EntriesEntry_DoNotUse::MergeFrom(const AppendEntriesRequest_EntriesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata AppendEntriesRequest_EntriesEntry_DoNotUse::GetMetadata() const {
  ::protobuf_rotr_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_rotr_2eproto::file_level_metadata[4];
}
void AppendEntriesRequest_EntriesEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void AppendEntriesRequest::InitAsDefaultInstance() {
  ::rotr::_AppendEntriesRequest_default_instance_._instance.get_mutable()->leadernode_ = const_cast< ::rotr::NodeInfo*>(
      ::rotr::NodeInfo::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AppendEntriesRequest::kTermFieldNumber;
const int AppendEntriesRequest::kLeaderNodeFieldNumber;
const int AppendEntriesRequest::kPrevLogIndexFieldNumber;
const int AppendEntriesRequest::kPrevLogTermFieldNumber;
const int AppendEntriesRequest::kLeaderCommitIndexFieldNumber;
const int AppendEntriesRequest::kEntriesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AppendEntriesRequest::AppendEntriesRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_rotr_2eproto::scc_info_AppendEntriesRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:rotr.AppendEntriesRequest)
}
AppendEntriesRequest::AppendEntriesRequest(const AppendEntriesRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  entries_.MergeFrom(from.entries_);
  if (from.has_leadernode()) {
    leadernode_ = new ::rotr::NodeInfo(*from.leadernode_);
  } else {
    leadernode_ = NULL;
  }
  ::memcpy(&term_, &from.term_,
    static_cast<size_t>(reinterpret_cast<char*>(&leadercommitindex_) -
    reinterpret_cast<char*>(&term_)) + sizeof(leadercommitindex_));
  // @@protoc_insertion_point(copy_constructor:rotr.AppendEntriesRequest)
}

void AppendEntriesRequest::SharedCtor() {
  ::memset(&leadernode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&leadercommitindex_) -
      reinterpret_cast<char*>(&leadernode_)) + sizeof(leadercommitindex_));
}

AppendEntriesRequest::~AppendEntriesRequest() {
  // @@protoc_insertion_point(destructor:rotr.AppendEntriesRequest)
  SharedDtor();
}

void AppendEntriesRequest::SharedDtor() {
  if (this != internal_default_instance()) delete leadernode_;
}

void AppendEntriesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AppendEntriesRequest::descriptor() {
  ::protobuf_rotr_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_rotr_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AppendEntriesRequest& AppendEntriesRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_rotr_2eproto::scc_info_AppendEntriesRequest.base);
  return *internal_default_instance();
}


void AppendEntriesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:rotr.AppendEntriesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entries_.Clear();
  if (GetArenaNoVirtual() == NULL && leadernode_ != NULL) {
    delete leadernode_;
  }
  leadernode_ = NULL;
  ::memset(&term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&leadercommitindex_) -
      reinterpret_cast<char*>(&term_)) + sizeof(leadercommitindex_));
  _internal_metadata_.Clear();
}

bool AppendEntriesRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rotr.AppendEntriesRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 term = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &term_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .rotr.NodeInfo leaderNode = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_leadernode()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 prevLogIndex = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prevlogindex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 prevLogTerm = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prevlogterm_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 leaderCommitIndex = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &leadercommitindex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, string> entries = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          AppendEntriesRequest_EntriesEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              AppendEntriesRequest_EntriesEntry_DoNotUse,
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&entries_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "rotr.AppendEntriesRequest.EntriesEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "rotr.AppendEntriesRequest.EntriesEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rotr.AppendEntriesRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rotr.AppendEntriesRequest)
  return false;
#undef DO_
}

void AppendEntriesRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rotr.AppendEntriesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 term = 1;
  if (this->term() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->term(), output);
  }

  // .rotr.NodeInfo leaderNode = 2;
  if (this->has_leadernode()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_leadernode(), output);
  }

  // uint32 prevLogIndex = 3;
  if (this->prevlogindex() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->prevlogindex(), output);
  }

  // uint32 prevLogTerm = 4;
  if (this->prevlogterm() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->prevlogterm(), output);
  }

  // uint32 leaderCommitIndex = 5;
  if (this->leadercommitindex() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->leadercommitindex(), output);
  }

  // map<string, string> entries = 6;
  if (!this->entries().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "rotr.AppendEntriesRequest.EntriesEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "rotr.AppendEntriesRequest.EntriesEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->entries().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->entries().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->entries().begin();
          it != this->entries().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<AppendEntriesRequest_EntriesEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(entries_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            6, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<AppendEntriesRequest_EntriesEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->entries().begin();
          it != this->entries().end(); ++it) {
        entry.reset(entries_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            6, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:rotr.AppendEntriesRequest)
}

::google::protobuf::uint8* AppendEntriesRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:rotr.AppendEntriesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 term = 1;
  if (this->term() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->term(), target);
  }

  // .rotr.NodeInfo leaderNode = 2;
  if (this->has_leadernode()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_leadernode(), deterministic, target);
  }

  // uint32 prevLogIndex = 3;
  if (this->prevlogindex() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->prevlogindex(), target);
  }

  // uint32 prevLogTerm = 4;
  if (this->prevlogterm() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->prevlogterm(), target);
  }

  // uint32 leaderCommitIndex = 5;
  if (this->leadercommitindex() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->leadercommitindex(), target);
  }

  // map<string, string> entries = 6;
  if (!this->entries().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "rotr.AppendEntriesRequest.EntriesEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "rotr.AppendEntriesRequest.EntriesEntry.value");
      }
    };

    if (deterministic &&
        this->entries().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->entries().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->entries().begin();
          it != this->entries().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<AppendEntriesRequest_EntriesEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(entries_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       6, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<AppendEntriesRequest_EntriesEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->entries().begin();
          it != this->entries().end(); ++it) {
        entry.reset(entries_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       6, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rotr.AppendEntriesRequest)
  return target;
}

size_t AppendEntriesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rotr.AppendEntriesRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<string, string> entries = 6;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->entries_size());
  {
    ::std::unique_ptr<AppendEntriesRequest_EntriesEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->entries().begin();
        it != this->entries().end(); ++it) {
      entry.reset(entries_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // .rotr.NodeInfo leaderNode = 2;
  if (this->has_leadernode()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *leadernode_);
  }

  // uint32 term = 1;
  if (this->term() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->term());
  }

  // uint32 prevLogIndex = 3;
  if (this->prevlogindex() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->prevlogindex());
  }

  // uint32 prevLogTerm = 4;
  if (this->prevlogterm() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->prevlogterm());
  }

  // uint32 leaderCommitIndex = 5;
  if (this->leadercommitindex() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->leadercommitindex());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AppendEntriesRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rotr.AppendEntriesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AppendEntriesRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AppendEntriesRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rotr.AppendEntriesRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rotr.AppendEntriesRequest)
    MergeFrom(*source);
  }
}

void AppendEntriesRequest::MergeFrom(const AppendEntriesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rotr.AppendEntriesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  entries_.MergeFrom(from.entries_);
  if (from.has_leadernode()) {
    mutable_leadernode()->::rotr::NodeInfo::MergeFrom(from.leadernode());
  }
  if (from.term() != 0) {
    set_term(from.term());
  }
  if (from.prevlogindex() != 0) {
    set_prevlogindex(from.prevlogindex());
  }
  if (from.prevlogterm() != 0) {
    set_prevlogterm(from.prevlogterm());
  }
  if (from.leadercommitindex() != 0) {
    set_leadercommitindex(from.leadercommitindex());
  }
}

void AppendEntriesRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rotr.AppendEntriesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppendEntriesRequest::CopyFrom(const AppendEntriesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rotr.AppendEntriesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppendEntriesRequest::IsInitialized() const {
  return true;
}

void AppendEntriesRequest::Swap(AppendEntriesRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AppendEntriesRequest::InternalSwap(AppendEntriesRequest* other) {
  using std::swap;
  entries_.Swap(&other->entries_);
  swap(leadernode_, other->leadernode_);
  swap(term_, other->term_);
  swap(prevlogindex_, other->prevlogindex_);
  swap(prevlogterm_, other->prevlogterm_);
  swap(leadercommitindex_, other->leadercommitindex_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AppendEntriesRequest::GetMetadata() const {
  protobuf_rotr_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_rotr_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RequestVoteRequest::InitAsDefaultInstance() {
  ::rotr::_RequestVoteRequest_default_instance_._instance.get_mutable()->candidatenode_ = const_cast< ::rotr::NodeInfo*>(
      ::rotr::NodeInfo::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RequestVoteRequest::kTermFieldNumber;
const int RequestVoteRequest::kCandidateNodeFieldNumber;
const int RequestVoteRequest::kLastLogIndexFieldNumber;
const int RequestVoteRequest::kLastLogTermFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestVoteRequest::RequestVoteRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_rotr_2eproto::scc_info_RequestVoteRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:rotr.RequestVoteRequest)
}
RequestVoteRequest::RequestVoteRequest(const RequestVoteRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_candidatenode()) {
    candidatenode_ = new ::rotr::NodeInfo(*from.candidatenode_);
  } else {
    candidatenode_ = NULL;
  }
  ::memcpy(&term_, &from.term_,
    static_cast<size_t>(reinterpret_cast<char*>(&lastlogterm_) -
    reinterpret_cast<char*>(&term_)) + sizeof(lastlogterm_));
  // @@protoc_insertion_point(copy_constructor:rotr.RequestVoteRequest)
}

void RequestVoteRequest::SharedCtor() {
  ::memset(&candidatenode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lastlogterm_) -
      reinterpret_cast<char*>(&candidatenode_)) + sizeof(lastlogterm_));
}

RequestVoteRequest::~RequestVoteRequest() {
  // @@protoc_insertion_point(destructor:rotr.RequestVoteRequest)
  SharedDtor();
}

void RequestVoteRequest::SharedDtor() {
  if (this != internal_default_instance()) delete candidatenode_;
}

void RequestVoteRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RequestVoteRequest::descriptor() {
  ::protobuf_rotr_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_rotr_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RequestVoteRequest& RequestVoteRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_rotr_2eproto::scc_info_RequestVoteRequest.base);
  return *internal_default_instance();
}


void RequestVoteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:rotr.RequestVoteRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && candidatenode_ != NULL) {
    delete candidatenode_;
  }
  candidatenode_ = NULL;
  ::memset(&term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lastlogterm_) -
      reinterpret_cast<char*>(&term_)) + sizeof(lastlogterm_));
  _internal_metadata_.Clear();
}

bool RequestVoteRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rotr.RequestVoteRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 term = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &term_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .rotr.NodeInfo candidateNode = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_candidatenode()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 lastLogIndex = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lastlogindex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 lastLogTerm = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lastlogterm_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rotr.RequestVoteRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rotr.RequestVoteRequest)
  return false;
#undef DO_
}

void RequestVoteRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rotr.RequestVoteRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 term = 1;
  if (this->term() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->term(), output);
  }

  // .rotr.NodeInfo candidateNode = 2;
  if (this->has_candidatenode()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_candidatenode(), output);
  }

  // uint32 lastLogIndex = 3;
  if (this->lastlogindex() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->lastlogindex(), output);
  }

  // uint32 lastLogTerm = 4;
  if (this->lastlogterm() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->lastlogterm(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:rotr.RequestVoteRequest)
}

::google::protobuf::uint8* RequestVoteRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:rotr.RequestVoteRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 term = 1;
  if (this->term() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->term(), target);
  }

  // .rotr.NodeInfo candidateNode = 2;
  if (this->has_candidatenode()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_candidatenode(), deterministic, target);
  }

  // uint32 lastLogIndex = 3;
  if (this->lastlogindex() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->lastlogindex(), target);
  }

  // uint32 lastLogTerm = 4;
  if (this->lastlogterm() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->lastlogterm(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rotr.RequestVoteRequest)
  return target;
}

size_t RequestVoteRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rotr.RequestVoteRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .rotr.NodeInfo candidateNode = 2;
  if (this->has_candidatenode()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *candidatenode_);
  }

  // uint32 term = 1;
  if (this->term() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->term());
  }

  // uint32 lastLogIndex = 3;
  if (this->lastlogindex() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->lastlogindex());
  }

  // uint32 lastLogTerm = 4;
  if (this->lastlogterm() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->lastlogterm());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestVoteRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rotr.RequestVoteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestVoteRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestVoteRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rotr.RequestVoteRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rotr.RequestVoteRequest)
    MergeFrom(*source);
  }
}

void RequestVoteRequest::MergeFrom(const RequestVoteRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rotr.RequestVoteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_candidatenode()) {
    mutable_candidatenode()->::rotr::NodeInfo::MergeFrom(from.candidatenode());
  }
  if (from.term() != 0) {
    set_term(from.term());
  }
  if (from.lastlogindex() != 0) {
    set_lastlogindex(from.lastlogindex());
  }
  if (from.lastlogterm() != 0) {
    set_lastlogterm(from.lastlogterm());
  }
}

void RequestVoteRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rotr.RequestVoteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestVoteRequest::CopyFrom(const RequestVoteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rotr.RequestVoteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestVoteRequest::IsInitialized() const {
  return true;
}

void RequestVoteRequest::Swap(RequestVoteRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestVoteRequest::InternalSwap(RequestVoteRequest* other) {
  using std::swap;
  swap(candidatenode_, other->candidatenode_);
  swap(term_, other->term_);
  swap(lastlogindex_, other->lastlogindex_);
  swap(lastlogterm_, other->lastlogterm_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RequestVoteRequest::GetMetadata() const {
  protobuf_rotr_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_rotr_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AppendEntriesResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AppendEntriesResponse::kCurrentTermFieldNumber;
const int AppendEntriesResponse::kSuccessFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AppendEntriesResponse::AppendEntriesResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_rotr_2eproto::scc_info_AppendEntriesResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:rotr.AppendEntriesResponse)
}
AppendEntriesResponse::AppendEntriesResponse(const AppendEntriesResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&currentterm_, &from.currentterm_,
    static_cast<size_t>(reinterpret_cast<char*>(&success_) -
    reinterpret_cast<char*>(&currentterm_)) + sizeof(success_));
  // @@protoc_insertion_point(copy_constructor:rotr.AppendEntriesResponse)
}

void AppendEntriesResponse::SharedCtor() {
  ::memset(&currentterm_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&success_) -
      reinterpret_cast<char*>(&currentterm_)) + sizeof(success_));
}

AppendEntriesResponse::~AppendEntriesResponse() {
  // @@protoc_insertion_point(destructor:rotr.AppendEntriesResponse)
  SharedDtor();
}

void AppendEntriesResponse::SharedDtor() {
}

void AppendEntriesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AppendEntriesResponse::descriptor() {
  ::protobuf_rotr_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_rotr_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AppendEntriesResponse& AppendEntriesResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_rotr_2eproto::scc_info_AppendEntriesResponse.base);
  return *internal_default_instance();
}


void AppendEntriesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:rotr.AppendEntriesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&currentterm_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&success_) -
      reinterpret_cast<char*>(&currentterm_)) + sizeof(success_));
  _internal_metadata_.Clear();
}

bool AppendEntriesResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rotr.AppendEntriesResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 currentTerm = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &currentterm_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool success = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rotr.AppendEntriesResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rotr.AppendEntriesResponse)
  return false;
#undef DO_
}

void AppendEntriesResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rotr.AppendEntriesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 currentTerm = 1;
  if (this->currentterm() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->currentterm(), output);
  }

  // bool success = 2;
  if (this->success() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->success(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:rotr.AppendEntriesResponse)
}

::google::protobuf::uint8* AppendEntriesResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:rotr.AppendEntriesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 currentTerm = 1;
  if (this->currentterm() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->currentterm(), target);
  }

  // bool success = 2;
  if (this->success() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->success(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rotr.AppendEntriesResponse)
  return target;
}

size_t AppendEntriesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rotr.AppendEntriesResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 currentTerm = 1;
  if (this->currentterm() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->currentterm());
  }

  // bool success = 2;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AppendEntriesResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rotr.AppendEntriesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AppendEntriesResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AppendEntriesResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rotr.AppendEntriesResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rotr.AppendEntriesResponse)
    MergeFrom(*source);
  }
}

void AppendEntriesResponse::MergeFrom(const AppendEntriesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rotr.AppendEntriesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.currentterm() != 0) {
    set_currentterm(from.currentterm());
  }
  if (from.success() != 0) {
    set_success(from.success());
  }
}

void AppendEntriesResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rotr.AppendEntriesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppendEntriesResponse::CopyFrom(const AppendEntriesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rotr.AppendEntriesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppendEntriesResponse::IsInitialized() const {
  return true;
}

void AppendEntriesResponse::Swap(AppendEntriesResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AppendEntriesResponse::InternalSwap(AppendEntriesResponse* other) {
  using std::swap;
  swap(currentterm_, other->currentterm_);
  swap(success_, other->success_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AppendEntriesResponse::GetMetadata() const {
  protobuf_rotr_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_rotr_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RequestVoteResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RequestVoteResponse::kTermFieldNumber;
const int RequestVoteResponse::kVoteGrantedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestVoteResponse::RequestVoteResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_rotr_2eproto::scc_info_RequestVoteResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:rotr.RequestVoteResponse)
}
RequestVoteResponse::RequestVoteResponse(const RequestVoteResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&term_, &from.term_,
    static_cast<size_t>(reinterpret_cast<char*>(&votegranted_) -
    reinterpret_cast<char*>(&term_)) + sizeof(votegranted_));
  // @@protoc_insertion_point(copy_constructor:rotr.RequestVoteResponse)
}

void RequestVoteResponse::SharedCtor() {
  ::memset(&term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&votegranted_) -
      reinterpret_cast<char*>(&term_)) + sizeof(votegranted_));
}

RequestVoteResponse::~RequestVoteResponse() {
  // @@protoc_insertion_point(destructor:rotr.RequestVoteResponse)
  SharedDtor();
}

void RequestVoteResponse::SharedDtor() {
}

void RequestVoteResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RequestVoteResponse::descriptor() {
  ::protobuf_rotr_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_rotr_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RequestVoteResponse& RequestVoteResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_rotr_2eproto::scc_info_RequestVoteResponse.base);
  return *internal_default_instance();
}


void RequestVoteResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:rotr.RequestVoteResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&votegranted_) -
      reinterpret_cast<char*>(&term_)) + sizeof(votegranted_));
  _internal_metadata_.Clear();
}

bool RequestVoteResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rotr.RequestVoteResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 term = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &term_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool voteGranted = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &votegranted_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rotr.RequestVoteResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rotr.RequestVoteResponse)
  return false;
#undef DO_
}

void RequestVoteResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rotr.RequestVoteResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 term = 1;
  if (this->term() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->term(), output);
  }

  // bool voteGranted = 2;
  if (this->votegranted() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->votegranted(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:rotr.RequestVoteResponse)
}

::google::protobuf::uint8* RequestVoteResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:rotr.RequestVoteResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 term = 1;
  if (this->term() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->term(), target);
  }

  // bool voteGranted = 2;
  if (this->votegranted() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->votegranted(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rotr.RequestVoteResponse)
  return target;
}

size_t RequestVoteResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rotr.RequestVoteResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 term = 1;
  if (this->term() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->term());
  }

  // bool voteGranted = 2;
  if (this->votegranted() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestVoteResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rotr.RequestVoteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestVoteResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestVoteResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rotr.RequestVoteResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rotr.RequestVoteResponse)
    MergeFrom(*source);
  }
}

void RequestVoteResponse::MergeFrom(const RequestVoteResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rotr.RequestVoteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.term() != 0) {
    set_term(from.term());
  }
  if (from.votegranted() != 0) {
    set_votegranted(from.votegranted());
  }
}

void RequestVoteResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rotr.RequestVoteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestVoteResponse::CopyFrom(const RequestVoteResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rotr.RequestVoteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestVoteResponse::IsInitialized() const {
  return true;
}

void RequestVoteResponse::Swap(RequestVoteResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestVoteResponse::InternalSwap(RequestVoteResponse* other) {
  using std::swap;
  swap(term_, other->term_);
  swap(votegranted_, other->votegranted_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RequestVoteResponse::GetMetadata() const {
  protobuf_rotr_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_rotr_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace rotr
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::rotr::Status* Arena::CreateMaybeMessage< ::rotr::Status >(Arena* arena) {
  return Arena::CreateInternal< ::rotr::Status >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::rotr::NodeInfo* Arena::CreateMaybeMessage< ::rotr::NodeInfo >(Arena* arena) {
  return Arena::CreateInternal< ::rotr::NodeInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::rotr::ClusterInfo* Arena::CreateMaybeMessage< ::rotr::ClusterInfo >(Arena* arena) {
  return Arena::CreateInternal< ::rotr::ClusterInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::rotr::NodeInfoList* Arena::CreateMaybeMessage< ::rotr::NodeInfoList >(Arena* arena) {
  return Arena::CreateInternal< ::rotr::NodeInfoList >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::rotr::AppendEntriesRequest_EntriesEntry_DoNotUse* Arena::CreateMaybeMessage< ::rotr::AppendEntriesRequest_EntriesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::rotr::AppendEntriesRequest_EntriesEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::rotr::AppendEntriesRequest* Arena::CreateMaybeMessage< ::rotr::AppendEntriesRequest >(Arena* arena) {
  return Arena::CreateInternal< ::rotr::AppendEntriesRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::rotr::RequestVoteRequest* Arena::CreateMaybeMessage< ::rotr::RequestVoteRequest >(Arena* arena) {
  return Arena::CreateInternal< ::rotr::RequestVoteRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::rotr::AppendEntriesResponse* Arena::CreateMaybeMessage< ::rotr::AppendEntriesResponse >(Arena* arena) {
  return Arena::CreateInternal< ::rotr::AppendEntriesResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::rotr::RequestVoteResponse* Arena::CreateMaybeMessage< ::rotr::RequestVoteResponse >(Arena* arena) {
  return Arena::CreateInternal< ::rotr::RequestVoteResponse >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
