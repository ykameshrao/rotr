// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rotr.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_rotr_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_rotr_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/wrappers.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_rotr_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_rotr_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
void AddDescriptors_rotr_2eproto();
namespace rotr {
class ClusterInfo;
class ClusterInfoDefaultTypeInternal;
extern ClusterInfoDefaultTypeInternal _ClusterInfo_default_instance_;
class NodeInfo;
class NodeInfoDefaultTypeInternal;
extern NodeInfoDefaultTypeInternal _NodeInfo_default_instance_;
class NodeInfoList;
class NodeInfoListDefaultTypeInternal;
extern NodeInfoListDefaultTypeInternal _NodeInfoList_default_instance_;
class Status;
class StatusDefaultTypeInternal;
extern StatusDefaultTypeInternal _Status_default_instance_;
}  // namespace rotr
PROTOBUF_NAMESPACE_OPEN
template<> ::rotr::ClusterInfo* Arena::CreateMaybeMessage<::rotr::ClusterInfo>(Arena*);
template<> ::rotr::NodeInfo* Arena::CreateMaybeMessage<::rotr::NodeInfo>(Arena*);
template<> ::rotr::NodeInfoList* Arena::CreateMaybeMessage<::rotr::NodeInfoList>(Arena*);
template<> ::rotr::Status* Arena::CreateMaybeMessage<::rotr::Status>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace rotr {

enum StatusCode {
  None = 0,
  Failure = 1,
  Success = 2,
  StatusCode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  StatusCode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool StatusCode_IsValid(int value);
constexpr StatusCode StatusCode_MIN = None;
constexpr StatusCode StatusCode_MAX = Success;
constexpr int StatusCode_ARRAYSIZE = StatusCode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StatusCode_descriptor();
inline const std::string& StatusCode_Name(StatusCode value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    StatusCode_descriptor(), value);
}
inline bool StatusCode_Parse(
    const std::string& name, StatusCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<StatusCode>(
    StatusCode_descriptor(), name, value);
}
// ===================================================================

class Status :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rotr.Status) */ {
 public:
  Status();
  virtual ~Status();

  Status(const Status& from);
  Status(Status&& from) noexcept
    : Status() {
    *this = ::std::move(from);
  }

  inline Status& operator=(const Status& from) {
    CopyFrom(from);
    return *this;
  }
  inline Status& operator=(Status&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Status& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Status* internal_default_instance() {
    return reinterpret_cast<const Status*>(
               &_Status_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Status* other);
  friend void swap(Status& a, Status& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Status* New() const final {
    return CreateMaybeMessage<Status>(nullptr);
  }

  Status* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Status>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Status& from);
  void MergeFrom(const Status& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Status* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rotr.Status";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string message = 2;
  void clear_message();
  static const int kMessageFieldNumber = 2;
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);

  // .rotr.StatusCode statusCode = 1;
  void clear_statuscode();
  static const int kStatusCodeFieldNumber = 1;
  ::rotr::StatusCode statuscode() const;
  void set_statuscode(::rotr::StatusCode value);

  // @@protoc_insertion_point(class_scope:rotr.Status)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  int statuscode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rotr_2eproto;
};
// -------------------------------------------------------------------

class NodeInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rotr.NodeInfo) */ {
 public:
  NodeInfo();
  virtual ~NodeInfo();

  NodeInfo(const NodeInfo& from);
  NodeInfo(NodeInfo&& from) noexcept
    : NodeInfo() {
    *this = ::std::move(from);
  }

  inline NodeInfo& operator=(const NodeInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline NodeInfo& operator=(NodeInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const NodeInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NodeInfo* internal_default_instance() {
    return reinterpret_cast<const NodeInfo*>(
               &_NodeInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(NodeInfo* other);
  friend void swap(NodeInfo& a, NodeInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NodeInfo* New() const final {
    return CreateMaybeMessage<NodeInfo>(nullptr);
  }

  NodeInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NodeInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NodeInfo& from);
  void MergeFrom(const NodeInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NodeInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rotr.NodeInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string ipV4Address = 1;
  void clear_ipv4address();
  static const int kIpV4AddressFieldNumber = 1;
  const std::string& ipv4address() const;
  void set_ipv4address(const std::string& value);
  void set_ipv4address(std::string&& value);
  void set_ipv4address(const char* value);
  void set_ipv4address(const char* value, size_t size);
  std::string* mutable_ipv4address();
  std::string* release_ipv4address();
  void set_allocated_ipv4address(std::string* ipv4address);

  // string hostName = 2;
  void clear_hostname();
  static const int kHostNameFieldNumber = 2;
  const std::string& hostname() const;
  void set_hostname(const std::string& value);
  void set_hostname(std::string&& value);
  void set_hostname(const char* value);
  void set_hostname(const char* value, size_t size);
  std::string* mutable_hostname();
  std::string* release_hostname();
  void set_allocated_hostname(std::string* hostname);

  // string brokerClusterId = 4;
  void clear_brokerclusterid();
  static const int kBrokerClusterIdFieldNumber = 4;
  const std::string& brokerclusterid() const;
  void set_brokerclusterid(const std::string& value);
  void set_brokerclusterid(std::string&& value);
  void set_brokerclusterid(const char* value);
  void set_brokerclusterid(const char* value, size_t size);
  std::string* mutable_brokerclusterid();
  std::string* release_brokerclusterid();
  void set_allocated_brokerclusterid(std::string* brokerclusterid);

  // string brokerClusterName = 5;
  void clear_brokerclustername();
  static const int kBrokerClusterNameFieldNumber = 5;
  const std::string& brokerclustername() const;
  void set_brokerclustername(const std::string& value);
  void set_brokerclustername(std::string&& value);
  void set_brokerclustername(const char* value);
  void set_brokerclustername(const char* value, size_t size);
  std::string* mutable_brokerclustername();
  std::string* release_brokerclustername();
  void set_allocated_brokerclustername(std::string* brokerclustername);

  // bool isLeader = 3;
  void clear_isleader();
  static const int kIsLeaderFieldNumber = 3;
  bool isleader() const;
  void set_isleader(bool value);

  // @@protoc_insertion_point(class_scope:rotr.NodeInfo)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ipv4address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hostname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr brokerclusterid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr brokerclustername_;
  bool isleader_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rotr_2eproto;
};
// -------------------------------------------------------------------

class ClusterInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rotr.ClusterInfo) */ {
 public:
  ClusterInfo();
  virtual ~ClusterInfo();

  ClusterInfo(const ClusterInfo& from);
  ClusterInfo(ClusterInfo&& from) noexcept
    : ClusterInfo() {
    *this = ::std::move(from);
  }

  inline ClusterInfo& operator=(const ClusterInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClusterInfo& operator=(ClusterInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ClusterInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClusterInfo* internal_default_instance() {
    return reinterpret_cast<const ClusterInfo*>(
               &_ClusterInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(ClusterInfo* other);
  friend void swap(ClusterInfo& a, ClusterInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ClusterInfo* New() const final {
    return CreateMaybeMessage<ClusterInfo>(nullptr);
  }

  ClusterInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClusterInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClusterInfo& from);
  void MergeFrom(const ClusterInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClusterInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rotr.ClusterInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .rotr.NodeInfo nodes = 3;
  int nodes_size() const;
  void clear_nodes();
  static const int kNodesFieldNumber = 3;
  ::rotr::NodeInfo* mutable_nodes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rotr::NodeInfo >*
      mutable_nodes();
  const ::rotr::NodeInfo& nodes(int index) const;
  ::rotr::NodeInfo* add_nodes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rotr::NodeInfo >&
      nodes() const;

  // string clusterName = 1;
  void clear_clustername();
  static const int kClusterNameFieldNumber = 1;
  const std::string& clustername() const;
  void set_clustername(const std::string& value);
  void set_clustername(std::string&& value);
  void set_clustername(const char* value);
  void set_clustername(const char* value, size_t size);
  std::string* mutable_clustername();
  std::string* release_clustername();
  void set_allocated_clustername(std::string* clustername);

  // string clusterId = 2;
  void clear_clusterid();
  static const int kClusterIdFieldNumber = 2;
  const std::string& clusterid() const;
  void set_clusterid(const std::string& value);
  void set_clusterid(std::string&& value);
  void set_clusterid(const char* value);
  void set_clusterid(const char* value, size_t size);
  std::string* mutable_clusterid();
  std::string* release_clusterid();
  void set_allocated_clusterid(std::string* clusterid);

  // .rotr.NodeInfo leader = 5;
  bool has_leader() const;
  void clear_leader();
  static const int kLeaderFieldNumber = 5;
  const ::rotr::NodeInfo& leader() const;
  ::rotr::NodeInfo* release_leader();
  ::rotr::NodeInfo* mutable_leader();
  void set_allocated_leader(::rotr::NodeInfo* leader);

  // @@protoc_insertion_point(class_scope:rotr.ClusterInfo)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rotr::NodeInfo > nodes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr clustername_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr clusterid_;
  ::rotr::NodeInfo* leader_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rotr_2eproto;
};
// -------------------------------------------------------------------

class NodeInfoList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rotr.NodeInfoList) */ {
 public:
  NodeInfoList();
  virtual ~NodeInfoList();

  NodeInfoList(const NodeInfoList& from);
  NodeInfoList(NodeInfoList&& from) noexcept
    : NodeInfoList() {
    *this = ::std::move(from);
  }

  inline NodeInfoList& operator=(const NodeInfoList& from) {
    CopyFrom(from);
    return *this;
  }
  inline NodeInfoList& operator=(NodeInfoList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const NodeInfoList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NodeInfoList* internal_default_instance() {
    return reinterpret_cast<const NodeInfoList*>(
               &_NodeInfoList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(NodeInfoList* other);
  friend void swap(NodeInfoList& a, NodeInfoList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NodeInfoList* New() const final {
    return CreateMaybeMessage<NodeInfoList>(nullptr);
  }

  NodeInfoList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NodeInfoList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NodeInfoList& from);
  void MergeFrom(const NodeInfoList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NodeInfoList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rotr.NodeInfoList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .rotr.NodeInfo nodes = 1;
  int nodes_size() const;
  void clear_nodes();
  static const int kNodesFieldNumber = 1;
  ::rotr::NodeInfo* mutable_nodes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rotr::NodeInfo >*
      mutable_nodes();
  const ::rotr::NodeInfo& nodes(int index) const;
  ::rotr::NodeInfo* add_nodes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rotr::NodeInfo >&
      nodes() const;

  // @@protoc_insertion_point(class_scope:rotr.NodeInfoList)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rotr::NodeInfo > nodes_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rotr_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Status

// .rotr.StatusCode statusCode = 1;
inline void Status::clear_statuscode() {
  statuscode_ = 0;
}
inline ::rotr::StatusCode Status::statuscode() const {
  // @@protoc_insertion_point(field_get:rotr.Status.statusCode)
  return static_cast< ::rotr::StatusCode >(statuscode_);
}
inline void Status::set_statuscode(::rotr::StatusCode value) {
  
  statuscode_ = value;
  // @@protoc_insertion_point(field_set:rotr.Status.statusCode)
}

// string message = 2;
inline void Status::clear_message() {
  message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Status::message() const {
  // @@protoc_insertion_point(field_get:rotr.Status.message)
  return message_.GetNoArena();
}
inline void Status::set_message(const std::string& value) {
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rotr.Status.message)
}
inline void Status::set_message(std::string&& value) {
  
  message_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:rotr.Status.message)
}
inline void Status::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rotr.Status.message)
}
inline void Status::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rotr.Status.message)
}
inline std::string* Status::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:rotr.Status.message)
  return message_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Status::release_message() {
  // @@protoc_insertion_point(field_release:rotr.Status.message)
  
  return message_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Status::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:rotr.Status.message)
}

// -------------------------------------------------------------------

// NodeInfo

// string ipV4Address = 1;
inline void NodeInfo::clear_ipv4address() {
  ipv4address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& NodeInfo::ipv4address() const {
  // @@protoc_insertion_point(field_get:rotr.NodeInfo.ipV4Address)
  return ipv4address_.GetNoArena();
}
inline void NodeInfo::set_ipv4address(const std::string& value) {
  
  ipv4address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rotr.NodeInfo.ipV4Address)
}
inline void NodeInfo::set_ipv4address(std::string&& value) {
  
  ipv4address_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:rotr.NodeInfo.ipV4Address)
}
inline void NodeInfo::set_ipv4address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ipv4address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rotr.NodeInfo.ipV4Address)
}
inline void NodeInfo::set_ipv4address(const char* value, size_t size) {
  
  ipv4address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rotr.NodeInfo.ipV4Address)
}
inline std::string* NodeInfo::mutable_ipv4address() {
  
  // @@protoc_insertion_point(field_mutable:rotr.NodeInfo.ipV4Address)
  return ipv4address_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NodeInfo::release_ipv4address() {
  // @@protoc_insertion_point(field_release:rotr.NodeInfo.ipV4Address)
  
  return ipv4address_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NodeInfo::set_allocated_ipv4address(std::string* ipv4address) {
  if (ipv4address != nullptr) {
    
  } else {
    
  }
  ipv4address_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ipv4address);
  // @@protoc_insertion_point(field_set_allocated:rotr.NodeInfo.ipV4Address)
}

// string hostName = 2;
inline void NodeInfo::clear_hostname() {
  hostname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& NodeInfo::hostname() const {
  // @@protoc_insertion_point(field_get:rotr.NodeInfo.hostName)
  return hostname_.GetNoArena();
}
inline void NodeInfo::set_hostname(const std::string& value) {
  
  hostname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rotr.NodeInfo.hostName)
}
inline void NodeInfo::set_hostname(std::string&& value) {
  
  hostname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:rotr.NodeInfo.hostName)
}
inline void NodeInfo::set_hostname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hostname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rotr.NodeInfo.hostName)
}
inline void NodeInfo::set_hostname(const char* value, size_t size) {
  
  hostname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rotr.NodeInfo.hostName)
}
inline std::string* NodeInfo::mutable_hostname() {
  
  // @@protoc_insertion_point(field_mutable:rotr.NodeInfo.hostName)
  return hostname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NodeInfo::release_hostname() {
  // @@protoc_insertion_point(field_release:rotr.NodeInfo.hostName)
  
  return hostname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NodeInfo::set_allocated_hostname(std::string* hostname) {
  if (hostname != nullptr) {
    
  } else {
    
  }
  hostname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hostname);
  // @@protoc_insertion_point(field_set_allocated:rotr.NodeInfo.hostName)
}

// bool isLeader = 3;
inline void NodeInfo::clear_isleader() {
  isleader_ = false;
}
inline bool NodeInfo::isleader() const {
  // @@protoc_insertion_point(field_get:rotr.NodeInfo.isLeader)
  return isleader_;
}
inline void NodeInfo::set_isleader(bool value) {
  
  isleader_ = value;
  // @@protoc_insertion_point(field_set:rotr.NodeInfo.isLeader)
}

// string brokerClusterId = 4;
inline void NodeInfo::clear_brokerclusterid() {
  brokerclusterid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& NodeInfo::brokerclusterid() const {
  // @@protoc_insertion_point(field_get:rotr.NodeInfo.brokerClusterId)
  return brokerclusterid_.GetNoArena();
}
inline void NodeInfo::set_brokerclusterid(const std::string& value) {
  
  brokerclusterid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rotr.NodeInfo.brokerClusterId)
}
inline void NodeInfo::set_brokerclusterid(std::string&& value) {
  
  brokerclusterid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:rotr.NodeInfo.brokerClusterId)
}
inline void NodeInfo::set_brokerclusterid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  brokerclusterid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rotr.NodeInfo.brokerClusterId)
}
inline void NodeInfo::set_brokerclusterid(const char* value, size_t size) {
  
  brokerclusterid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rotr.NodeInfo.brokerClusterId)
}
inline std::string* NodeInfo::mutable_brokerclusterid() {
  
  // @@protoc_insertion_point(field_mutable:rotr.NodeInfo.brokerClusterId)
  return brokerclusterid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NodeInfo::release_brokerclusterid() {
  // @@protoc_insertion_point(field_release:rotr.NodeInfo.brokerClusterId)
  
  return brokerclusterid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NodeInfo::set_allocated_brokerclusterid(std::string* brokerclusterid) {
  if (brokerclusterid != nullptr) {
    
  } else {
    
  }
  brokerclusterid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), brokerclusterid);
  // @@protoc_insertion_point(field_set_allocated:rotr.NodeInfo.brokerClusterId)
}

// string brokerClusterName = 5;
inline void NodeInfo::clear_brokerclustername() {
  brokerclustername_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& NodeInfo::brokerclustername() const {
  // @@protoc_insertion_point(field_get:rotr.NodeInfo.brokerClusterName)
  return brokerclustername_.GetNoArena();
}
inline void NodeInfo::set_brokerclustername(const std::string& value) {
  
  brokerclustername_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rotr.NodeInfo.brokerClusterName)
}
inline void NodeInfo::set_brokerclustername(std::string&& value) {
  
  brokerclustername_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:rotr.NodeInfo.brokerClusterName)
}
inline void NodeInfo::set_brokerclustername(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  brokerclustername_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rotr.NodeInfo.brokerClusterName)
}
inline void NodeInfo::set_brokerclustername(const char* value, size_t size) {
  
  brokerclustername_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rotr.NodeInfo.brokerClusterName)
}
inline std::string* NodeInfo::mutable_brokerclustername() {
  
  // @@protoc_insertion_point(field_mutable:rotr.NodeInfo.brokerClusterName)
  return brokerclustername_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NodeInfo::release_brokerclustername() {
  // @@protoc_insertion_point(field_release:rotr.NodeInfo.brokerClusterName)
  
  return brokerclustername_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NodeInfo::set_allocated_brokerclustername(std::string* brokerclustername) {
  if (brokerclustername != nullptr) {
    
  } else {
    
  }
  brokerclustername_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), brokerclustername);
  // @@protoc_insertion_point(field_set_allocated:rotr.NodeInfo.brokerClusterName)
}

// -------------------------------------------------------------------

// ClusterInfo

// string clusterName = 1;
inline void ClusterInfo::clear_clustername() {
  clustername_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ClusterInfo::clustername() const {
  // @@protoc_insertion_point(field_get:rotr.ClusterInfo.clusterName)
  return clustername_.GetNoArena();
}
inline void ClusterInfo::set_clustername(const std::string& value) {
  
  clustername_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rotr.ClusterInfo.clusterName)
}
inline void ClusterInfo::set_clustername(std::string&& value) {
  
  clustername_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:rotr.ClusterInfo.clusterName)
}
inline void ClusterInfo::set_clustername(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  clustername_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rotr.ClusterInfo.clusterName)
}
inline void ClusterInfo::set_clustername(const char* value, size_t size) {
  
  clustername_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rotr.ClusterInfo.clusterName)
}
inline std::string* ClusterInfo::mutable_clustername() {
  
  // @@protoc_insertion_point(field_mutable:rotr.ClusterInfo.clusterName)
  return clustername_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ClusterInfo::release_clustername() {
  // @@protoc_insertion_point(field_release:rotr.ClusterInfo.clusterName)
  
  return clustername_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ClusterInfo::set_allocated_clustername(std::string* clustername) {
  if (clustername != nullptr) {
    
  } else {
    
  }
  clustername_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), clustername);
  // @@protoc_insertion_point(field_set_allocated:rotr.ClusterInfo.clusterName)
}

// string clusterId = 2;
inline void ClusterInfo::clear_clusterid() {
  clusterid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ClusterInfo::clusterid() const {
  // @@protoc_insertion_point(field_get:rotr.ClusterInfo.clusterId)
  return clusterid_.GetNoArena();
}
inline void ClusterInfo::set_clusterid(const std::string& value) {
  
  clusterid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rotr.ClusterInfo.clusterId)
}
inline void ClusterInfo::set_clusterid(std::string&& value) {
  
  clusterid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:rotr.ClusterInfo.clusterId)
}
inline void ClusterInfo::set_clusterid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  clusterid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rotr.ClusterInfo.clusterId)
}
inline void ClusterInfo::set_clusterid(const char* value, size_t size) {
  
  clusterid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rotr.ClusterInfo.clusterId)
}
inline std::string* ClusterInfo::mutable_clusterid() {
  
  // @@protoc_insertion_point(field_mutable:rotr.ClusterInfo.clusterId)
  return clusterid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ClusterInfo::release_clusterid() {
  // @@protoc_insertion_point(field_release:rotr.ClusterInfo.clusterId)
  
  return clusterid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ClusterInfo::set_allocated_clusterid(std::string* clusterid) {
  if (clusterid != nullptr) {
    
  } else {
    
  }
  clusterid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), clusterid);
  // @@protoc_insertion_point(field_set_allocated:rotr.ClusterInfo.clusterId)
}

// repeated .rotr.NodeInfo nodes = 3;
inline int ClusterInfo::nodes_size() const {
  return nodes_.size();
}
inline void ClusterInfo::clear_nodes() {
  nodes_.Clear();
}
inline ::rotr::NodeInfo* ClusterInfo::mutable_nodes(int index) {
  // @@protoc_insertion_point(field_mutable:rotr.ClusterInfo.nodes)
  return nodes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rotr::NodeInfo >*
ClusterInfo::mutable_nodes() {
  // @@protoc_insertion_point(field_mutable_list:rotr.ClusterInfo.nodes)
  return &nodes_;
}
inline const ::rotr::NodeInfo& ClusterInfo::nodes(int index) const {
  // @@protoc_insertion_point(field_get:rotr.ClusterInfo.nodes)
  return nodes_.Get(index);
}
inline ::rotr::NodeInfo* ClusterInfo::add_nodes() {
  // @@protoc_insertion_point(field_add:rotr.ClusterInfo.nodes)
  return nodes_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rotr::NodeInfo >&
ClusterInfo::nodes() const {
  // @@protoc_insertion_point(field_list:rotr.ClusterInfo.nodes)
  return nodes_;
}

// .rotr.NodeInfo leader = 5;
inline bool ClusterInfo::has_leader() const {
  return this != internal_default_instance() && leader_ != nullptr;
}
inline void ClusterInfo::clear_leader() {
  if (GetArenaNoVirtual() == nullptr && leader_ != nullptr) {
    delete leader_;
  }
  leader_ = nullptr;
}
inline const ::rotr::NodeInfo& ClusterInfo::leader() const {
  const ::rotr::NodeInfo* p = leader_;
  // @@protoc_insertion_point(field_get:rotr.ClusterInfo.leader)
  return p != nullptr ? *p : *reinterpret_cast<const ::rotr::NodeInfo*>(
      &::rotr::_NodeInfo_default_instance_);
}
inline ::rotr::NodeInfo* ClusterInfo::release_leader() {
  // @@protoc_insertion_point(field_release:rotr.ClusterInfo.leader)
  
  ::rotr::NodeInfo* temp = leader_;
  leader_ = nullptr;
  return temp;
}
inline ::rotr::NodeInfo* ClusterInfo::mutable_leader() {
  
  if (leader_ == nullptr) {
    auto* p = CreateMaybeMessage<::rotr::NodeInfo>(GetArenaNoVirtual());
    leader_ = p;
  }
  // @@protoc_insertion_point(field_mutable:rotr.ClusterInfo.leader)
  return leader_;
}
inline void ClusterInfo::set_allocated_leader(::rotr::NodeInfo* leader) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete leader_;
  }
  if (leader) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      leader = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, leader, submessage_arena);
    }
    
  } else {
    
  }
  leader_ = leader;
  // @@protoc_insertion_point(field_set_allocated:rotr.ClusterInfo.leader)
}

// -------------------------------------------------------------------

// NodeInfoList

// repeated .rotr.NodeInfo nodes = 1;
inline int NodeInfoList::nodes_size() const {
  return nodes_.size();
}
inline void NodeInfoList::clear_nodes() {
  nodes_.Clear();
}
inline ::rotr::NodeInfo* NodeInfoList::mutable_nodes(int index) {
  // @@protoc_insertion_point(field_mutable:rotr.NodeInfoList.nodes)
  return nodes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rotr::NodeInfo >*
NodeInfoList::mutable_nodes() {
  // @@protoc_insertion_point(field_mutable_list:rotr.NodeInfoList.nodes)
  return &nodes_;
}
inline const ::rotr::NodeInfo& NodeInfoList::nodes(int index) const {
  // @@protoc_insertion_point(field_get:rotr.NodeInfoList.nodes)
  return nodes_.Get(index);
}
inline ::rotr::NodeInfo* NodeInfoList::add_nodes() {
  // @@protoc_insertion_point(field_add:rotr.NodeInfoList.nodes)
  return nodes_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rotr::NodeInfo >&
NodeInfoList::nodes() const {
  // @@protoc_insertion_point(field_list:rotr.NodeInfoList.nodes)
  return nodes_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace rotr

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::rotr::StatusCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::rotr::StatusCode>() {
  return ::rotr::StatusCode_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_rotr_2eproto
