// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: rotr.proto

#include "rotr.pb.h"
#include "rotr.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace rotr {

static const char* ReplicationService_method_names[] = {
  "/rotr.ReplicationService/AppendEntries",
};

std::unique_ptr< ReplicationService::Stub> ReplicationService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ReplicationService::Stub> stub(new ReplicationService::Stub(channel));
  return stub;
}

ReplicationService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_AppendEntries_(ReplicationService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ReplicationService::Stub::AppendEntries(::grpc::ClientContext* context, const ::rotr::AppendEntriesRequest& request, ::rotr::AppendEntriesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_AppendEntries_, context, request, response);
}

void ReplicationService::Stub::experimental_async::AppendEntries(::grpc::ClientContext* context, const ::rotr::AppendEntriesRequest* request, ::rotr::AppendEntriesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AppendEntries_, context, request, response, std::move(f));
}

void ReplicationService::Stub::experimental_async::AppendEntries(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::rotr::AppendEntriesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AppendEntries_, context, request, response, std::move(f));
}

void ReplicationService::Stub::experimental_async::AppendEntries(::grpc::ClientContext* context, const ::rotr::AppendEntriesRequest* request, ::rotr::AppendEntriesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_AppendEntries_, context, request, response, reactor);
}

void ReplicationService::Stub::experimental_async::AppendEntries(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::rotr::AppendEntriesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_AppendEntries_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::rotr::AppendEntriesResponse>* ReplicationService::Stub::AsyncAppendEntriesRaw(::grpc::ClientContext* context, const ::rotr::AppendEntriesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::rotr::AppendEntriesResponse>::Create(channel_.get(), cq, rpcmethod_AppendEntries_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::rotr::AppendEntriesResponse>* ReplicationService::Stub::PrepareAsyncAppendEntriesRaw(::grpc::ClientContext* context, const ::rotr::AppendEntriesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::rotr::AppendEntriesResponse>::Create(channel_.get(), cq, rpcmethod_AppendEntries_, context, request, false);
}

ReplicationService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ReplicationService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ReplicationService::Service, ::rotr::AppendEntriesRequest, ::rotr::AppendEntriesResponse>(
          [](ReplicationService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::rotr::AppendEntriesRequest* req,
             ::rotr::AppendEntriesResponse* resp) {
               return service->AppendEntries(ctx, req, resp);
             }, this)));
}

ReplicationService::Service::~Service() {
}

::grpc::Status ReplicationService::Service::AppendEntries(::grpc::ServerContext* context, const ::rotr::AppendEntriesRequest* request, ::rotr::AppendEntriesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* ElectionService_method_names[] = {
  "/rotr.ElectionService/RequestVote",
};

std::unique_ptr< ElectionService::Stub> ElectionService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ElectionService::Stub> stub(new ElectionService::Stub(channel));
  return stub;
}

ElectionService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_RequestVote_(ElectionService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ElectionService::Stub::RequestVote(::grpc::ClientContext* context, const ::rotr::RequestVoteRequest& request, ::rotr::RequestVoteResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_RequestVote_, context, request, response);
}

void ElectionService::Stub::experimental_async::RequestVote(::grpc::ClientContext* context, const ::rotr::RequestVoteRequest* request, ::rotr::RequestVoteResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RequestVote_, context, request, response, std::move(f));
}

void ElectionService::Stub::experimental_async::RequestVote(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::rotr::RequestVoteResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RequestVote_, context, request, response, std::move(f));
}

void ElectionService::Stub::experimental_async::RequestVote(::grpc::ClientContext* context, const ::rotr::RequestVoteRequest* request, ::rotr::RequestVoteResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RequestVote_, context, request, response, reactor);
}

void ElectionService::Stub::experimental_async::RequestVote(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::rotr::RequestVoteResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RequestVote_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::rotr::RequestVoteResponse>* ElectionService::Stub::AsyncRequestVoteRaw(::grpc::ClientContext* context, const ::rotr::RequestVoteRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::rotr::RequestVoteResponse>::Create(channel_.get(), cq, rpcmethod_RequestVote_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::rotr::RequestVoteResponse>* ElectionService::Stub::PrepareAsyncRequestVoteRaw(::grpc::ClientContext* context, const ::rotr::RequestVoteRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::rotr::RequestVoteResponse>::Create(channel_.get(), cq, rpcmethod_RequestVote_, context, request, false);
}

ElectionService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ElectionService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ElectionService::Service, ::rotr::RequestVoteRequest, ::rotr::RequestVoteResponse>(
          [](ElectionService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::rotr::RequestVoteRequest* req,
             ::rotr::RequestVoteResponse* resp) {
               return service->RequestVote(ctx, req, resp);
             }, this)));
}

ElectionService::Service::~Service() {
}

::grpc::Status ElectionService::Service::RequestVote(::grpc::ServerContext* context, const ::rotr::RequestVoteRequest* request, ::rotr::RequestVoteResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* RotrService_method_names[] = {
  "/rotr.RotrService/Get",
  "/rotr.RotrService/Put",
  "/rotr.RotrService/DiscoverCluster",
};

std::unique_ptr< RotrService::Stub> RotrService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< RotrService::Stub> stub(new RotrService::Stub(channel));
  return stub;
}

RotrService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Get_(RotrService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Put_(RotrService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DiscoverCluster_(RotrService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status RotrService::Stub::Get(::grpc::ClientContext* context, const ::rotr::RotrGetRequest& request, ::rotr::RotrGetResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Get_, context, request, response);
}

void RotrService::Stub::experimental_async::Get(::grpc::ClientContext* context, const ::rotr::RotrGetRequest* request, ::rotr::RotrGetResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Get_, context, request, response, std::move(f));
}

void RotrService::Stub::experimental_async::Get(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::rotr::RotrGetResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Get_, context, request, response, std::move(f));
}

void RotrService::Stub::experimental_async::Get(::grpc::ClientContext* context, const ::rotr::RotrGetRequest* request, ::rotr::RotrGetResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Get_, context, request, response, reactor);
}

void RotrService::Stub::experimental_async::Get(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::rotr::RotrGetResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Get_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::rotr::RotrGetResponse>* RotrService::Stub::AsyncGetRaw(::grpc::ClientContext* context, const ::rotr::RotrGetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::rotr::RotrGetResponse>::Create(channel_.get(), cq, rpcmethod_Get_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::rotr::RotrGetResponse>* RotrService::Stub::PrepareAsyncGetRaw(::grpc::ClientContext* context, const ::rotr::RotrGetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::rotr::RotrGetResponse>::Create(channel_.get(), cq, rpcmethod_Get_, context, request, false);
}

::grpc::Status RotrService::Stub::Put(::grpc::ClientContext* context, const ::rotr::RotrPutRequest& request, ::rotr::RotrPutResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Put_, context, request, response);
}

void RotrService::Stub::experimental_async::Put(::grpc::ClientContext* context, const ::rotr::RotrPutRequest* request, ::rotr::RotrPutResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Put_, context, request, response, std::move(f));
}

void RotrService::Stub::experimental_async::Put(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::rotr::RotrPutResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Put_, context, request, response, std::move(f));
}

void RotrService::Stub::experimental_async::Put(::grpc::ClientContext* context, const ::rotr::RotrPutRequest* request, ::rotr::RotrPutResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Put_, context, request, response, reactor);
}

void RotrService::Stub::experimental_async::Put(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::rotr::RotrPutResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Put_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::rotr::RotrPutResponse>* RotrService::Stub::AsyncPutRaw(::grpc::ClientContext* context, const ::rotr::RotrPutRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::rotr::RotrPutResponse>::Create(channel_.get(), cq, rpcmethod_Put_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::rotr::RotrPutResponse>* RotrService::Stub::PrepareAsyncPutRaw(::grpc::ClientContext* context, const ::rotr::RotrPutRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::rotr::RotrPutResponse>::Create(channel_.get(), cq, rpcmethod_Put_, context, request, false);
}

::grpc::Status RotrService::Stub::DiscoverCluster(::grpc::ClientContext* context, const ::rotr::Null& request, ::rotr::ClusterInfo* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DiscoverCluster_, context, request, response);
}

void RotrService::Stub::experimental_async::DiscoverCluster(::grpc::ClientContext* context, const ::rotr::Null* request, ::rotr::ClusterInfo* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DiscoverCluster_, context, request, response, std::move(f));
}

void RotrService::Stub::experimental_async::DiscoverCluster(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::rotr::ClusterInfo* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DiscoverCluster_, context, request, response, std::move(f));
}

void RotrService::Stub::experimental_async::DiscoverCluster(::grpc::ClientContext* context, const ::rotr::Null* request, ::rotr::ClusterInfo* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DiscoverCluster_, context, request, response, reactor);
}

void RotrService::Stub::experimental_async::DiscoverCluster(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::rotr::ClusterInfo* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DiscoverCluster_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::rotr::ClusterInfo>* RotrService::Stub::AsyncDiscoverClusterRaw(::grpc::ClientContext* context, const ::rotr::Null& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::rotr::ClusterInfo>::Create(channel_.get(), cq, rpcmethod_DiscoverCluster_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::rotr::ClusterInfo>* RotrService::Stub::PrepareAsyncDiscoverClusterRaw(::grpc::ClientContext* context, const ::rotr::Null& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::rotr::ClusterInfo>::Create(channel_.get(), cq, rpcmethod_DiscoverCluster_, context, request, false);
}

RotrService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RotrService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RotrService::Service, ::rotr::RotrGetRequest, ::rotr::RotrGetResponse>(
          [](RotrService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::rotr::RotrGetRequest* req,
             ::rotr::RotrGetResponse* resp) {
               return service->Get(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RotrService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RotrService::Service, ::rotr::RotrPutRequest, ::rotr::RotrPutResponse>(
          [](RotrService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::rotr::RotrPutRequest* req,
             ::rotr::RotrPutResponse* resp) {
               return service->Put(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RotrService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RotrService::Service, ::rotr::Null, ::rotr::ClusterInfo>(
          [](RotrService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::rotr::Null* req,
             ::rotr::ClusterInfo* resp) {
               return service->DiscoverCluster(ctx, req, resp);
             }, this)));
}

RotrService::Service::~Service() {
}

::grpc::Status RotrService::Service::Get(::grpc::ServerContext* context, const ::rotr::RotrGetRequest* request, ::rotr::RotrGetResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RotrService::Service::Put(::grpc::ServerContext* context, const ::rotr::RotrPutRequest* request, ::rotr::RotrPutResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RotrService::Service::DiscoverCluster(::grpc::ServerContext* context, const ::rotr::Null* request, ::rotr::ClusterInfo* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace rotr

