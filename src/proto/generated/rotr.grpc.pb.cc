// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: rotr.proto

#include "rotr.pb.h"
#include "rotr.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace rotr {

static const char* RaftInternalRPC_method_names[] = {
  "/rotr.RaftInternalRPC/AppendEntries",
  "/rotr.RaftInternalRPC/RequestVote",
};

std::unique_ptr< RaftInternalRPC::Stub> RaftInternalRPC::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< RaftInternalRPC::Stub> stub(new RaftInternalRPC::Stub(channel));
  return stub;
}

RaftInternalRPC::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_AppendEntries_(RaftInternalRPC_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RequestVote_(RaftInternalRPC_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status RaftInternalRPC::Stub::AppendEntries(::grpc::ClientContext* context, const ::rotr::AppendEntriesRequest& request, ::rotr::AppendEntriesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_AppendEntries_, context, request, response);
}

void RaftInternalRPC::Stub::experimental_async::AppendEntries(::grpc::ClientContext* context, const ::rotr::AppendEntriesRequest* request, ::rotr::AppendEntriesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AppendEntries_, context, request, response, std::move(f));
}

void RaftInternalRPC::Stub::experimental_async::AppendEntries(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::rotr::AppendEntriesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AppendEntries_, context, request, response, std::move(f));
}

void RaftInternalRPC::Stub::experimental_async::AppendEntries(::grpc::ClientContext* context, const ::rotr::AppendEntriesRequest* request, ::rotr::AppendEntriesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_AppendEntries_, context, request, response, reactor);
}

void RaftInternalRPC::Stub::experimental_async::AppendEntries(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::rotr::AppendEntriesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_AppendEntries_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::rotr::AppendEntriesResponse>* RaftInternalRPC::Stub::AsyncAppendEntriesRaw(::grpc::ClientContext* context, const ::rotr::AppendEntriesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::rotr::AppendEntriesResponse>::Create(channel_.get(), cq, rpcmethod_AppendEntries_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::rotr::AppendEntriesResponse>* RaftInternalRPC::Stub::PrepareAsyncAppendEntriesRaw(::grpc::ClientContext* context, const ::rotr::AppendEntriesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::rotr::AppendEntriesResponse>::Create(channel_.get(), cq, rpcmethod_AppendEntries_, context, request, false);
}

::grpc::Status RaftInternalRPC::Stub::RequestVote(::grpc::ClientContext* context, const ::rotr::RequestVoteRequest& request, ::rotr::RequestVoteResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_RequestVote_, context, request, response);
}

void RaftInternalRPC::Stub::experimental_async::RequestVote(::grpc::ClientContext* context, const ::rotr::RequestVoteRequest* request, ::rotr::RequestVoteResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RequestVote_, context, request, response, std::move(f));
}

void RaftInternalRPC::Stub::experimental_async::RequestVote(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::rotr::RequestVoteResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RequestVote_, context, request, response, std::move(f));
}

void RaftInternalRPC::Stub::experimental_async::RequestVote(::grpc::ClientContext* context, const ::rotr::RequestVoteRequest* request, ::rotr::RequestVoteResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RequestVote_, context, request, response, reactor);
}

void RaftInternalRPC::Stub::experimental_async::RequestVote(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::rotr::RequestVoteResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RequestVote_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::rotr::RequestVoteResponse>* RaftInternalRPC::Stub::AsyncRequestVoteRaw(::grpc::ClientContext* context, const ::rotr::RequestVoteRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::rotr::RequestVoteResponse>::Create(channel_.get(), cq, rpcmethod_RequestVote_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::rotr::RequestVoteResponse>* RaftInternalRPC::Stub::PrepareAsyncRequestVoteRaw(::grpc::ClientContext* context, const ::rotr::RequestVoteRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::rotr::RequestVoteResponse>::Create(channel_.get(), cq, rpcmethod_RequestVote_, context, request, false);
}

RaftInternalRPC::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RaftInternalRPC_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RaftInternalRPC::Service, ::rotr::AppendEntriesRequest, ::rotr::AppendEntriesResponse>(
          [](RaftInternalRPC::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::rotr::AppendEntriesRequest* req,
             ::rotr::AppendEntriesResponse* resp) {
               return service->AppendEntries(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RaftInternalRPC_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RaftInternalRPC::Service, ::rotr::RequestVoteRequest, ::rotr::RequestVoteResponse>(
          [](RaftInternalRPC::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::rotr::RequestVoteRequest* req,
             ::rotr::RequestVoteResponse* resp) {
               return service->RequestVote(ctx, req, resp);
             }, this)));
}

RaftInternalRPC::Service::~Service() {
}

::grpc::Status RaftInternalRPC::Service::AppendEntries(::grpc::ServerContext* context, const ::rotr::AppendEntriesRequest* request, ::rotr::AppendEntriesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RaftInternalRPC::Service::RequestVote(::grpc::ServerContext* context, const ::rotr::RequestVoteRequest* request, ::rotr::RequestVoteResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* ClusterService_method_names[] = {
  "/rotr.ClusterService/RegisterNode",
  "/rotr.ClusterService/DiscoverClusterById",
};

std::unique_ptr< ClusterService::Stub> ClusterService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ClusterService::Stub> stub(new ClusterService::Stub(channel));
  return stub;
}

ClusterService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_RegisterNode_(ClusterService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DiscoverClusterById_(ClusterService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ClusterService::Stub::RegisterNode(::grpc::ClientContext* context, const ::rotr::NodeInfo& request, ::rotr::ClusterInfo* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_RegisterNode_, context, request, response);
}

void ClusterService::Stub::experimental_async::RegisterNode(::grpc::ClientContext* context, const ::rotr::NodeInfo* request, ::rotr::ClusterInfo* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RegisterNode_, context, request, response, std::move(f));
}

void ClusterService::Stub::experimental_async::RegisterNode(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::rotr::ClusterInfo* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RegisterNode_, context, request, response, std::move(f));
}

void ClusterService::Stub::experimental_async::RegisterNode(::grpc::ClientContext* context, const ::rotr::NodeInfo* request, ::rotr::ClusterInfo* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RegisterNode_, context, request, response, reactor);
}

void ClusterService::Stub::experimental_async::RegisterNode(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::rotr::ClusterInfo* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RegisterNode_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::rotr::ClusterInfo>* ClusterService::Stub::AsyncRegisterNodeRaw(::grpc::ClientContext* context, const ::rotr::NodeInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::rotr::ClusterInfo>::Create(channel_.get(), cq, rpcmethod_RegisterNode_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::rotr::ClusterInfo>* ClusterService::Stub::PrepareAsyncRegisterNodeRaw(::grpc::ClientContext* context, const ::rotr::NodeInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::rotr::ClusterInfo>::Create(channel_.get(), cq, rpcmethod_RegisterNode_, context, request, false);
}

::grpc::Status ClusterService::Stub::DiscoverClusterById(::grpc::ClientContext* context, const ::google::protobuf::StringValue& request, ::rotr::ClusterInfo* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DiscoverClusterById_, context, request, response);
}

void ClusterService::Stub::experimental_async::DiscoverClusterById(::grpc::ClientContext* context, const ::google::protobuf::StringValue* request, ::rotr::ClusterInfo* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DiscoverClusterById_, context, request, response, std::move(f));
}

void ClusterService::Stub::experimental_async::DiscoverClusterById(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::rotr::ClusterInfo* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DiscoverClusterById_, context, request, response, std::move(f));
}

void ClusterService::Stub::experimental_async::DiscoverClusterById(::grpc::ClientContext* context, const ::google::protobuf::StringValue* request, ::rotr::ClusterInfo* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DiscoverClusterById_, context, request, response, reactor);
}

void ClusterService::Stub::experimental_async::DiscoverClusterById(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::rotr::ClusterInfo* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DiscoverClusterById_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::rotr::ClusterInfo>* ClusterService::Stub::AsyncDiscoverClusterByIdRaw(::grpc::ClientContext* context, const ::google::protobuf::StringValue& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::rotr::ClusterInfo>::Create(channel_.get(), cq, rpcmethod_DiscoverClusterById_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::rotr::ClusterInfo>* ClusterService::Stub::PrepareAsyncDiscoverClusterByIdRaw(::grpc::ClientContext* context, const ::google::protobuf::StringValue& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::rotr::ClusterInfo>::Create(channel_.get(), cq, rpcmethod_DiscoverClusterById_, context, request, false);
}

ClusterService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ClusterService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ClusterService::Service, ::rotr::NodeInfo, ::rotr::ClusterInfo>(
          [](ClusterService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::rotr::NodeInfo* req,
             ::rotr::ClusterInfo* resp) {
               return service->RegisterNode(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ClusterService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ClusterService::Service, ::google::protobuf::StringValue, ::rotr::ClusterInfo>(
          [](ClusterService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::google::protobuf::StringValue* req,
             ::rotr::ClusterInfo* resp) {
               return service->DiscoverClusterById(ctx, req, resp);
             }, this)));
}

ClusterService::Service::~Service() {
}

::grpc::Status ClusterService::Service::RegisterNode(::grpc::ServerContext* context, const ::rotr::NodeInfo* request, ::rotr::ClusterInfo* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ClusterService::Service::DiscoverClusterById(::grpc::ServerContext* context, const ::google::protobuf::StringValue* request, ::rotr::ClusterInfo* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace rotr

